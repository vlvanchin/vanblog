<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Van&#39;s Blog</title>
    <link>/vanblog/post/</link>
    <description>Recent content in Posts on Van&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 06 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="/vanblog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AWS s3</title>
      <link>/vanblog/aws-s3/</link>
      <pubDate>Sun, 06 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>/vanblog/aws-s3/</guid>
      <description>AWS S3 Tips This page gives some tips on how to manage the files and buckets in S3
To list all the buckets (folders) To get help for s3 command
$ aws s3 help Try to run the following
$ aws s3 ls to list all the buckets using a specific profile
$ aws s3 --profile ${profile_name} ls to list all the files in a specific bucket; say test_bucket
$ aws s3 ls s3://test_bucket to list all the files in a specific bucket with a prefix get</description>
    </item>
    
    <item>
      <title>Webservice</title>
      <link>/vanblog/webservicetips/</link>
      <pubDate>Thu, 02 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/vanblog/webservicetips/</guid>
      <description>jax-ws using soap and wsdl &amp;gt; mkdir -p helloservice/endpoint/ &amp;gt; mkdir build &amp;gt; javac -d build helloservice/endpoint/*java &amp;gt; C:\dev\ides\eclipse\workspace\attachmentws&amp;gt;wsgen -d build -s build -cp c:\dev\ides\eclipse\workspace\attachmentws\build helloservice.endpoint.Hello &amp;gt; java -cp build helloservice.endpoint.Server This is to generated web service classes for the service and WSDL and XSD C:\dev\ides\eclipse\workspace\FileAttachmentExample&amp;gt;wsgen -d bin -s bin -wsdl -cp c:\dev\ides\eclipse\workspace\FileAttachmentExample\bin com.company.jira.services.ws.attach.server.FileTransferImpl This is to generate web service classes for the client based on the WSDL from the localhost wsimport -keep -p net.</description>
    </item>
    
    <item>
      <title>Linux</title>
      <link>/vanblog/shelltips/</link>
      <pubDate>Tue, 09 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/vanblog/shelltips/</guid>
      <description>Some commands that benifit you How to search text in folder and sub-folders // to search &amp;ldquo;httpclient&amp;rdquo; text in current and subfolders // -r is recursive and -l to list the file along with path.
$ grep -rl &amp;quot;httpclient&amp;quot; ./ Commands for Vimdiff // to jump to the next/previous difference
]c : - next difference [c : - previous difference // to bringing difference from other file to current file</description>
    </item>
    
    <item>
      <title>K8s</title>
      <link>/vanblog/k8stips/</link>
      <pubDate>Tue, 02 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>/vanblog/k8stips/</guid>
      <description>Kubernetes Tips: Selfhelp page to test and learn about Kubernetes.
Install kubectl that CLI to access and control cluster.  On Ubuntu   $ sudo snap install kubectl --classic To test kubectl try the following  $ kubectl version the output would be as follows:
Client Version: version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;11&amp;quot;, GitVersion:&amp;quot;v1.11.0&amp;quot;, GitCommit:&amp;quot;91e7b4fd3c980becec37ceefe&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;2018-06-27T20:17:28Z&amp;quot;, GoVersion:&amp;quot;go1.10.2&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;linux/amd64&amp;quot;} The connection to the server localhost:8080 was refused - did you specify the right host or port?</description>
    </item>
    
    <item>
      <title>Java</title>
      <link>/vanblog/javatips/</link>
      <pubDate>Sat, 02 May 2020 00:00:00 +0000</pubDate>
      
      <guid>/vanblog/javatips/</guid>
      <description>How to run a packaged Java file from any folder Here is the structure of the Java project, were bin is the output folder
demo ├─ src | └── com | ├── van | └── Demo.java ├─ bin To compile the Demo.java try the following command from the demo folder that will place the .class file in the package folders within bin folder
$ javac -classpath ./src ./src/com/van/Demo.java -d ./bin</description>
    </item>
    
    <item>
      <title>FAQs</title>
      <link>/vanblog/faq/</link>
      <pubDate>Wed, 22 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/vanblog/faq/</guid>
      <description>How to fix the miss commits between the two branches in two separate repositories? Steps to be done to fix the miss commits between the two branches say the development branch in origin and upstream remotes.
 Find out the common commit for the two branches in the past and checkout a new branch within the origin remote eg: commonCommitBranch
 $ git checkout -b commonCommitBranch 2449134b726f723fa  update both the remotes</description>
    </item>
    
    <item>
      <title>Docker</title>
      <link>/vanblog/dockertips/</link>
      <pubDate>Sat, 04 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/vanblog/dockertips/</guid>
      <description>Docker Commands: Here are a few basic commands used in Docker // To pull a image &amp;lsquo;alpine&amp;rsquo; from docker registry. note to be logged in DockerHub site.
$ docker pull alpine // run docker container and execute &amp;lsquo;ls -l&amp;rsquo; command
$ docker run alpine ls -l // view all docker containers
$ docker ps -a // view all docker containers currently running
$ docker ps The above command gives the following:</description>
    </item>
    
    <item>
      <title>Docker Swarm</title>
      <link>/vanblog/dockerswarmtips/</link>
      <pubDate>Fri, 03 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/vanblog/dockerswarmtips/</guid>
      <description>Docker Swarm to initialize Swarm $ docker swarm init or $ docker swarm init --advertise-addr $(hostname -i) to join as a worker node from the above init command the manager node is configured and there would be two commands listed, one to join as a worker node and other to join as another manager node.
$ docker swarm join --token &amp;lt;xxxxx-x-xxx...&amp;gt; &amp;lt;host&amp;gt; to show the list of nodes in action this will show the active nodes and the Leader node</description>
    </item>
    
    <item>
      <title>GIT</title>
      <link>/vanblog/gittips/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/vanblog/gittips/</guid>
      <description>Delete branch locally and remotely: // to delete a local branch $ git branch --delete &amp;lt;&amp;lt;local_branch&amp;gt;&amp;gt; or $ git branch -d &amp;lt;&amp;lt;local_branch&amp;gt;&amp;gt; // To delete a local un-merged branch $ git branch -D &amp;lt;&amp;lt;local_branch&amp;gt;&amp;gt; // to delete a local remote - tracking branch $ git branch --dr &amp;lt;&amp;lt;remote&amp;gt;&amp;gt;/&amp;lt;&amp;lt;branch-name&amp;gt;&amp;gt; // to delete a remote branch $ git push --delete &amp;lt;&amp;lt;remote&amp;gt;&amp;gt; &amp;lt;&amp;lt;branch-name&amp;gt;&amp;gt; Cherry-pick commits: * find the common parent as the inital state * $ git checkout -b &amp;lt;&amp;lt;cherry-pick-branch-name&amp;gt;&amp;gt; &amp;lt;&amp;lt;initial-commit-id&amp;gt;&amp;gt; // create a new branch for cherry-pick * $ git cherry-pick &amp;lt;&amp;lt;commit-id-wanted&amp;gt;&amp;gt; // select the commit that you want * Fix any conflicts that arrise ** $ git cherry-pick --continue // to proceed on cherry-pick * git push &amp;lt;&amp;lt;remote&amp;gt;&amp;gt; &amp;lt;&amp;lt;cherry-pick-branch-name&amp;gt;&amp;gt; Other useful commands: how to restore the modified file contents from the remote Git $ git restore &amp;lt;filename&amp;gt; how to view logs for a specific branch $ git log --oneline --decorate &amp;lt;branch&amp;gt; to show all the names of the files committed in this commit $ git show --name-only &amp;lt;commit-id&amp;gt; to list the last 5 logs of a specific file $ git log -5 --follow &amp;lt;file-path&amp;gt; to checkout a specific commit of a specific file $ git checkout &amp;lt;commit-id&amp;gt; -- &amp;lt;file-path&amp;gt; reset a file from staged to work area $ git reset HEAD &amp;lt;file-path&amp;gt; to show differences of a staged file $ git diff --cached &amp;lt;file-path&amp;gt; to show differences of a file within an old and new commits $ git diff &amp;lt;old-commit-id&amp;gt; &amp;lt;new-commit-id&amp;gt; &amp;lt;file-path&amp;gt; to stash modified files except the staged $ git stash save --keep-index to add a file based on individual changes in that file, interactive mode $ git add --patch &amp;lt;file-path&amp;gt; How to reset last commit in local and remote: * reset head softly locally first $ git reset HEAD~1 * push forcefully to remote repo $ git push &amp;lt;&amp;lt;remote&amp;gt;&amp;gt; &amp;lt;&amp;lt;branch&amp;gt;&amp;gt; -f How to list all different commits between two Branches in a Repo # To list right-only branch commits that are not in the develop (left branch) $ git log --cherry-pick --right-only --no-merges develop.</description>
    </item>
    
    <item>
      <title>Mongo</title>
      <link>/vanblog/mongod/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/vanblog/mongod/</guid>
      <description>to run mongo demon with specified config file $ sudo mongod --config /etc/mongod.conf type mongo to enter the shell for mongod $ mongo to shutdown the mongod server $ sudo mongod --shutdown </description>
    </item>
    
  </channel>
</rss>
